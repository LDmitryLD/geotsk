// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "projects/LDmitryLD/geotask/module/courier/models"

	mock "github.com/stretchr/testify/mock"
)

// Courierer is an autogenerated mock type for the Courierer type
type Courierer struct {
	mock.Mock
}

// GetCourier provides a mock function with given fields: ctx
func (_m *Courierer) GetCourier(ctx context.Context) (*models.Courier, error) {
	ret := _m.Called(ctx)

	var r0 *models.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Courier, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Courier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveCourier provides a mock function with given fields: courier, direction, zoom
func (_m *Courierer) MoveCourier(courier models.Courier, direction int, zoom int) (models.Courier, error) {
	ret := _m.Called(courier, direction, zoom)

	var r0 models.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Courier, int, int) (models.Courier, error)); ok {
		return rf(courier, direction, zoom)
	}
	if rf, ok := ret.Get(0).(func(models.Courier, int, int) models.Courier); ok {
		r0 = rf(courier, direction, zoom)
	} else {
		r0 = ret.Get(0).(models.Courier)
	}

	if rf, ok := ret.Get(1).(func(models.Courier, int, int) error); ok {
		r1 = rf(courier, direction, zoom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, courier
func (_m *Courierer) Save(ctx context.Context, courier models.Courier) error {
	ret := _m.Called(ctx, courier)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Courier) error); ok {
		r0 = rf(ctx, courier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCourierer creates a new instance of Courierer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourierer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Courierer {
	mock := &Courierer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
